{"version":3,"sources":["components/ColorModeSwitcher.js","images/logo.svg","components/Logo.js","components/Layout.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","Logo","src","logo","Layout","children","minH","p","paddingBottom","gridTemplateRows","gridGap","justifyContent","width","justifySelf","App","spacing","alignItems","rel","target","href","_hover","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","theme","extendTheme","fonts","heading","body","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ad90900.chunk.js","sourcesContent":["import { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.e0c06f03.svg\";","import React from 'react';\nimport { Image } from '@chakra-ui/react';\nimport logo from 'images/logo.svg';\n\nconst Logo = props => <Image src={logo} {...props} />;\n\nexport default Logo;\n","import { Box, Grid, Container, HStack } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from 'components/ColorModeSwitcher';\nimport Logo from 'components/Logo';\n\nconst Layout = ({ children }) => (\n  <Box fontSize=\"lg\">\n    <Grid\n      minH=\"100vh\"\n      p={8}\n      paddingBottom={32}\n      gridTemplateRows=\"64px 1fr\"\n      gridGap={12}\n    >\n      <HStack justifyContent=\"space-between\" width=\"100%\">\n        <Logo />\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n      </HStack>\n\n      <Container>{children}</Container>\n    </Grid>\n  </Box>\n);\n\nexport default Layout;\n","import {\n  Text,\n  VStack,\n  Code,\n  Checkbox,\n  Heading,\n  UnorderedList,\n  ListItem,\n  Link,\n} from '@chakra-ui/react';\nimport Layout from 'components/Layout';\nimport { FaTwitter } from 'react-icons/fa';\n\nconst App = () => (\n  <Layout>\n    <VStack spacing={24} alignItems=\"flex-start\" justifyContent=\"flex-start\">\n      <VStack spacing={4} alignItems=\"flex-start\" justifyContent=\"flex-start\">\n        <Heading>Preamble</Heading>\n        <VStack spacing={2} alignItems=\"flex-start\" justifyContent=\"flex-start\">\n          <Text fontSize=\"lg\">\n            If you see this page, it means that you have successfully\n            bootstraped your project by typing\n            <Code fontSize=\"md\">\n              npx create-react-app --template @tymate/cra-template-lifegoals\n            </Code>{' '}\n            in the folder of your choice. If it isnâ€™t the case, you should do\n            it, then follow the instructions located in the{' '}\n            <Code fontSize=\"md\">README</Code> file.\n          </Text>\n        </VStack>\n      </VStack>\n\n      <VStack spacing={4} alignItems=\"flex-start\" justifyContent=\"flex-start\">\n        <Heading>Checklist</Heading>\n        <VStack spacing={2} alignItems=\"flex-start\" justifyContent=\"flex-start\">\n          <Checkbox>\n            <Text fontSize=\"lg\">GitHub repo created</Text>\n          </Checkbox>\n          <Checkbox>\n            <Text fontSize=\"lg\">Initial commit pushed</Text>\n          </Checkbox>\n          <Checkbox>\n            <Text fontSize=\"lg\">\n              Accessed json-server (locally) or my-json-server (when deployed)\n              API\n            </Text>\n          </Checkbox>\n          <Checkbox>\n            <Text fontSize=\"lg\">\n              <Code fontSize=\"md\">src/App.js</Code> edited (not before reading\n              below, though).\n            </Text>\n          </Checkbox>\n        </VStack>\n      </VStack>\n\n      <VStack spacing={12} alignItems=\"flex-start\" justifyContent=\"flex-start\">\n        <VStack spacing={4} alignItems=\"flex-start\" justifyContent=\"flex-start\">\n          <Heading>The mission:</Heading>\n          <Text fontSize=\"lg\">\n            We would like you to create your own{' '}\n            <strong>life goals tracking app</strong>. You will be able to get\n            access to a fake API, located at{' '}\n            <Code fontSize=\"md\">\n              https://my-json-server.typicode.com/my-username/my-repo/goals\n            </Code>\n            , where <Code fontSize=\"md\">my-username/my-repo</Code> represents\n            the path to you repository on GitHub.\n          </Text>\n        </VStack>\n\n        <VStack spacing={4} alignItems=\"flex-start\" justifyContent=\"flex-start\">\n          <Text fontSize=\"lg\">The app should consist of three pages:</Text>\n          <UnorderedList spacing={2} fontSize=\"lg\">\n            <ListItem>\n              A homepage, <Code fontSize=\"md\">/</Code>, containing the list of\n              you life goals.\n            </ListItem>\n            <ListItem>\n              A goal details page, <Code fontSize=\"md\">/:goalId</Code>,\n              displaying your life goals in more details. What changes between\n              the homepage and the details page is up to you, but we suggest\n              thinking about truncating or hiding the goals description on the\n              homepage.\n            </ListItem>\n            <ListItem>\n              An admin page, <Code fontSize=\"md\">/admin</Code>, where you will\n              be able to create, update and delete you life goals. We would like\n              the <Code fontSize=\"md\">title</Code>,{' '}\n              <Code fontSize=\"md\">description</Code> and{' '}\n              <Code fontSize=\"md\">imageUrl</Code> (consider using Unsplash?) to\n              be mandatory. We would like the{' '}\n              <Code fontSize=\"md\">completion</Code> field to act as checkbox as\n              well as date reference.\n            </ListItem>\n          </UnorderedList>\n        </VStack>\n      </VStack>\n\n      <VStack spacing={12} alignItems=\"flex-start\" justifyContent=\"flex-start\">\n        <Heading>Tools</Heading>\n        <VStack spacing={4} alignItems=\"flex-start\" justifyContent=\"flex-start\">\n          <Text fontSize=\"lg\">\n            This repo comes with the following libraries installed:\n          </Text>\n          <UnorderedList spacing={2} fontSize=\"lg\">\n            <ListItem>\n              <strong>UI library:</strong>{' '}\n              <Link\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href=\"https://chakra-ui.com/\"\n              >\n                Chakra\n              </Link>\n            </ListItem>\n            <ListItem>\n              <strong>Routing:</strong>{' '}\n              <Link\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href=\"https://reacttraining.com/blog/react-router-v6-pre/\"\n              >\n                react-router-dom v6\n              </Link>\n            </ListItem>\n            <ListItem>\n              <strong>Forms:</strong>{' '}\n              <Link\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href=\"https://formik.org/docs/overview\"\n              >\n                Formik\n              </Link>\n            </ListItem>\n            <ListItem>\n              <strong>Form errors handling:</strong>{' '}\n              <Link\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href=\"https://github.com/jquense/yup#api\"\n              >\n                Yup\n              </Link>\n            </ListItem>\n            <ListItem>\n              <strong>Icons:</strong>{' '}\n              <Link\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href=\"https://react-icons.github.io/react-icons/\"\n              >\n                react-icons\n              </Link>\n            </ListItem>\n            <ListItem>\n              <strong>Requests:</strong>{' '}\n              <Link\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href=\"https://react-query.tanstack.com/\"\n              >\n                React Query\n              </Link>\n            </ListItem>\n          </UnorderedList>\n        </VStack>\n\n        <VStack spacing={2} alignItems=\"flex-start\">\n          <Text fontSize=\"2xl\">Good luck!</Text>\n          <Link\n            href=\"https://twitter.com/TymateEng\"\n            rel=\"nofollow noopener noreferrer\"\n            target=\"_blank\"\n            _hover={{\n              color: 'blue.500',\n            }}\n          >\n            <FaTwitter />\n          </Link>\n        </VStack>\n      </VStack>\n    </VStack>\n  </Layout>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript, ChakraProvider, extendTheme } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport '@fontsource/inter/400.css';\nimport '@fontsource/inter/800.css';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <ChakraProvider\n      theme={extendTheme({\n        fonts: {\n          heading:\n            'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif',\n          body:\n            'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif',\n        },\n      })}\n    >\n      <App />\n    </ChakraProvider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\nreportWebVitals();\n"],"sourceRoot":""}